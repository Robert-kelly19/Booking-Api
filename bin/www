#!/usr/bin/env node

import app from '../app.js';
import deb from 'debug';
import http from 'http';
import logger from '../utils/logger.js';
import { connectToDb, initialzeDbSchema } from "../config/db.js";
const debug = deb('booking-service:server');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

const signals = {
  'SIGHUP': 1,
  'SIGINT': 2,
  'SIGTERM': 15
};

let shuttingDown = false;

const shutdown = (signal, value) => {
  if (shuttingDown) {
    logger.info(`Already shutting down. Received ${signal} again`);
    return;
  }
  shuttingDown = true
  logger.info(`Received ${signal}. Shutting down gracefully`)
  server.close((err) => {
    if (err) {
      logger.error("Error closing server", err)
      process.exit(1)
    } else {
      logger.info('server closed. Exiting the process.')
      process.exit(0)
    }
  })
}

Object.keys(signals).forEach((signal) => {
  process.on(signal, () => {
    logger.info(`Recieved ${signal}`)
    shutdown(signal, signals[signal])
  })
})

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      logger.info("trying to make it run on the next available port")
      startServer()
      // process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info(`Server is listening on ${bind}`);
  debug('Listening on ' + bind);
}



const startServer = async () => {
  try {
    logger.info(`Starting server on port ${port}...`);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    logger.info('Connecting to DB...');
    await connectToDb();

    logger.info('Initializing DB schema...');
    await initialzeDbSchema();

    logger.info('DB connected and schema initialized.');
    
  } catch (error) {
    logger.error('Failed during server startup process: ', error);
    process.exit(1);
  }
};


startServer()
