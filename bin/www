#!/usr/bin/env node

import app from '../app.js';
import deb from 'debug';
import http from 'http';
import logger from '../utils/logger.js';
import { connectToDb, initialzeDbSchema } from "../config/db.js";
const debug = deb('booking-service:server');

// Get port from environment and store in Express
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server
const server = http.createServer(app);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port;  // port number
  return false;
}

// Graceful shutdown handlers
const signals = {
  'SIGHUP': 1,
  'SIGINT': 2,
  'SIGTERM': 15
};

let shuttingDown = false;

const shutdown = (signal, value) => {
  if (shuttingDown) return;
  shuttingDown = true;
  logger.info(`Received ${signal}. Shutting down gracefully`);
  
  server.close((err) => {
    if (err) {
      logger.error("Error closing server", err);
      process.exit(1);
    }
    logger.info('Server closed. Exiting process.');
    process.exit(0);
  });
};

Object.keys(signals).forEach((signal) => {
  process.on(signal, () => {
    logger.info(`Received ${signal}`);
    shutdown(signal, signals[signal]);
  });
});

// Server error handler
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info(`Server is listening on ${bind}`);
  debug('Listening on ' + bind);
}

const startServer = async () => {
  try {
    // First connect to database
    logger.info('Connecting to DB...');
    await connectToDb();
    logger.info('Initializing DB schema...');
    await initialzeDbSchema();
    logger.info('DB connected and schema initialized.');

    // Then start the server
    logger.info(`Starting server on port ${port}...`);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

  } catch (error) {
    logger.error('‚ùå Failed during server startup process: ', error);
    process.exit(1);
  }
};

// Start the application
startServer();