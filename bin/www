#!/usr/bin/env node

import app from '../app.js';
import deb from 'debug';
import http from 'http';
import { Server } from 'socket.io';
import logger from '../utils/logger.js';
import { connectToDb, initialzeDbSchema } from "../config/db.js";

const debug = deb('booking-service:server');
const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);


const server = http.createServer(app);


const io = new Server(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST', 'PUT', 'DELETE']
  }
});


app.use((req, res, next) => {
  req.io = io;
  next();
});


function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}


const signals = { SIGHUP: 1, SIGINT: 2, SIGTERM: 15 };
let shuttingDown = false;

const shutDown = (signal, value) => {
  if (shuttingDown) {
    logger.info(`Shutdown already in progress. Received ${signal} again.`);
    return;
  }

  shuttingDown = true;
  logger.info(`Received ${signal}. Shutting down gracefully...`);

  server.close((err) => {
    if (err) {
      logger.error('Error while closing server:', err);
      process.exit(1);
    } else {
      logger.info('Server closed. Exiting process.');
      process.exit(0);
    }
  });
};

Object.keys(signals).forEach((signal) => {
  process.on(signal, () => shutDown(signal, signals[signal]));
});


function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}


function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logger.info(`Server is listening on ${bind}`);
}


const startServer = async () => {
  try {
    logger.info(`Starting server on port ${port}...`);

    logger.info('Connecting to database...');
    await connectToDb();

    logger.info('Initializing DB schema...');
    await initialzeDbSchema();

    logger.info('Connected to DB. Launching HTTP server...');
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    
    io.on('connection', (socket) => {
      logger.info(`Socket connected: ${socket.id}`);
    });

  } catch (err) {
    logger.error('Failed to start server:', err);
    process.exit(1);
  }
};

startServer();
